int tem,i,j,sum;
mdla[]m=new mdla[8];
boolean flag;
int []nexth=new int[8];
int []nextw=new int[8];

void draw(){
//saveFrame();
}

class mdla{
  int []h=new int[10];
  int []w=new int[10];
  int []s=new int[64];
  int p=1;
  int max=0;
  mdla(){
h[8]=200;
h[9]=200;
w[9]=200;
w[8]=200;
h[0]=0;
w[0]=0;

  do{  
  flag=true;
    for(int i=1;i<=7;i++){
  h[i]=floor(random(0,200));
  w[i]=floor(random(0,200));
  }
  
  for( i=1;i<=7;i++){
          tem=h[i];
    for ( j=i;j<=7;j++){
      if(tem >=h[j]){
        tem = h[j]; 
        max=j;
        }        
     }
        h[max]=h[i];
        h[i]=tem;
 }
   for( i=1;i<=7;i++){
          tem=w[i];
    for ( j=i;j<=7;j++){
      if(tem >=w[j]){
        tem = w[j]; 
        max=j;
        }        
     }
        w[max]=w[i];
        w[i]=tem;
 }
  
  for(i=1;i<=7;i++){
    if(h[i+1]-h[i]<=15){
      flag=false;
    }
    }
    
    for(i=1;i<=7;i++){
    if(w[i+1]-w[i]<=15){
      flag=false;
    }
    }
  
}while(flag==false);
}

void nextge(){
  for(int i=0;i<8;i++){
    for(int j=0;j<8;j++){
    nexth[i]=nexth[i]+m[j].h[i]*m[j].p/sum;
    nextw[i]=nextw[i]+m[j].w[i]*m[j].p/sum;
    }
    nexth[i]=nexth[i]/8;
    nextw[i]=nextw[i]/8;
  }
  
  for(int i=0;i<8;i++){
    h[i]=constrain(int(nexth[i]*0.3+h[i]*0.3+0.4*random(200)),0,200);
    w[i]=constrain(int(nextw[i]*0.3+w[i]*0.3+0.4*random(200)),0,200);
  }
   for( i=1;i<=7;i++){
          tem=h[i];
    for ( j=i;j<=7;j++){
      if(tem >=h[j]){
        tem = h[j]; 
        max=j;
        }        
     }
        h[max]=h[i];
        h[i]=tem;
 }
   for( i=1;i<=7;i++){
          tem=w[i];
    for ( j=i;j<=7;j++){
      if(tem >=w[j]){
        tem = w[j]; 
        max=j;
        }        
     }
        w[max]=w[i];
        w[i]=tem;
 }
  
  for(i=1;i<=7;i++){
    if(h[i+1]-h[i]<=15){
      flag=false;
    }
    }
    
    for(i=1;i<=7;i++){
    if(w[i+1]-w[i]<=15){
      flag=false;
    }
    }
  
}

void display(){
 strokeWeight(5);
 for(i=1;i<=7;i++){
 line(h[i],0,h[i],200);
 line(0,w[i],200,w[i]);
 
 }
 
 for(i=0;i<=7;i++){
 
   for(j=0;j<=7;j++){
    s[i*8+j]=(h[i+1]-h[i])*(w[j+1]-w[j]);
   }
 }
 
 max=1;
 
 for(i=0;i<=63;i++){
 
   if(s[i]<700 && flag==true){
     fill(80);
   rect(h[(i-i%8)/8],w[i%8],h[(i-i%8)/8+1]-h[(i-i%8)/8],w[i%8+2]-w[i%8]);
     flag=false;
   }
   else if(flag==true && s[i]>2000){
     fill(255);
       rect(h[(i-i%8)/8],w[i%8],h[(i-i%8)/8+2]-h[(i-i%8)/8],w[i%8+2]-w[i%8]);
       flag=false;
   }
   else{
     flag=true;
   }
   
   if(s[i]>=s[max]){
     max=i;
   }
     
 }
 
 fill(20);
  rect(h[(max-max%8)/8],w[max%8],h[(max-max%8)/8+1]-h[(max-max%8)/8],w[max%8+1]-w[max%8]);
 
      
    }
  }  


void mousePressed(){
  if(mouseX>200&&mouseX<800&&mouseY>600&&mouseY<700){
    background(255);
    rect(200,600,600,100);
    for(int ii=0;ii<8;ii++){
      sum=sum+m[ii].p; 
      m[ii].nextge();
    translate(20+250*(ii%4),250*(ii-ii%4)/4);
    m[ii].display();
    println(m[ii].h);
    m[ii].p=1;
    line(0,230,m[ii].p*20,230);
    translate(-20-250*(ii%4),-250*(ii-ii%4)/4);
    }
  }
  else if(mouseX>0&&mouseX<1000&&mouseY>0&&mouseY<500){
    m[(mouseX-mouseX%250)/250+4*(mouseY-mouseY%250)/250].p++;
  }
    
    for(int i=0;i<8;i++){
    translate(20+250*(i%4),250*(i-i%4)/4);
    line(0,230,m[i].p*20,230);
    translate(-20-250*(i%4),-250*(i-i%4)/4);
  }
}

//void ranline(){
//do{  
//  flag=true;
//    for(int i=1;i<=7;i++){
//  h[i]=floor(random(0,600)*0.5+0.5*m[1].h[i]*m[1].p/sum);
//  w[i]=floor(random(0,600));
//  }
  
//  for( i=1;i<=7;i++){
//          tem=h[i];
//    for ( j=i;j<=7;j++){
//      if(tem >=h[j]){
//        tem = h[j]; 
//        max=j;
//        }        
//     }
//        h[max]=h[i];
//        h[i]=tem;
// }
//   for( i=1;i<=7;i++){
//          tem=w[i];
//    for ( j=i;j<=7;j++){
//      if(tem >=w[j]){
//        tem = w[j]; 
//        max=j;
//        }        
//     }
//        w[max]=w[i];
//        w[i]=tem;
// }
  
//  for(i=1;i<=7;i++){
//    if(h[i+1]-h[i]<=15){
//      flag=false;
//    }
//    }
    
//    for(i=1;i<=7;i++){
//    if(w[i+1]-w[i]<=15){
//      flag=false;
//    }
//    }
  
//}while(flag=false);
//}

void setup()
{

flag=true;
  size(1000, 800);
  background(255);
  fill(100);
  strokeWeight(5);
  rect(200,650,600,60);
  for(int i=0;i<8;i++){
    m[i]=new mdla();
    translate(20+250*(i%4),250*(i-i%4)/4);
    m[i].display();
    line(0,230,m[i].p*20,230);
    translate(-20-250*(i%4),-250*(i-i%4)/4);
  }
  
 // ranline();
 

// for(int ii=0;ii<8;ii++){
// for(i=1;i<=7;i++){

 //line(m[ii].h[i],0,m[ii].h[i],600);
 //line(0,m[ii].w[i],600,m[ii].w[i]);
 
 //}
 
 //for(i=0;i<=7;i++){
 
 //  for(j=0;j<=7;j++){
 //   m[ii].s[i*8+j]=(m[ii].h[i+1]-m[ii].h[i])*(m[ii].w[j+1]-m[ii].w[j]);
 //  }
 //}
 
 //m[ii].max=1;
 
 //for(i=0;i<=63;i++){
 
 //  if(m[ii].s[i]<=2000 && flag==true){
 //    fill(80);
 //  rect(m[ii].h[(i-i%8)/8],m[ii].w[i%8],m[ii].h[(i-i%8)/8+1]-m[ii].h[(i-i%8)/8],m[ii].w[i%8+2]-m[ii].w[i%8]);
 //    flag=false;
 //  }
 //  else if(flag==true && m[ii].s[i]>10000){
 //    fill(255);
 //      rect(m[ii].h[(i-i%8)/8],m[ii].w[i%8],m[ii].h[(i-i%8)/8+2]-m[ii].h[(i-i%8)/8],m[ii].w[i%8+2]-m[ii].w[i%8]);
 //      flag=false;
 //  }
 //  else{
 //    flag=true;
 //  }
   
 //  if(m[ii].s[i]>=m[ii].s[m[ii].max]){
 //   m[ii]. max=i;
 //  }
     
 //}
 
 //fill(20);
 // rect(m[ii].h[(m[ii].max-m[ii].max%8)/8],m[ii].w[m[ii].max%8],m[ii].h[(m[ii].max-m[ii].max%8)/8+1]-m[ii].h[(m[ii].max-m[ii].max%8)/8],m[ii].w[m[ii].max%8+1]-m[ii].w[m[ii].max%8]);
 
//  for (i=0;i<=63;i++){
// System.out.println (s[i]);
//}
//  for (i=0;i<=8;i++){
// System.out.println (h[i]);
//}
// }
}
